import numpy as np

np.random.seed(42)
# Функция подсчета градиента
def gradient(alpha:np.array, y_true: int, y_pred: float, x: np.array) -> np.array:
    """
    y_true - истинное значение ответа для объекта x
    y_pred - значение степени принадлежности объекта x классу 1, предсказанное нашей моделью
    x - вектор признакового описания данного объекта

    На выходе ожидается получить вектор частных производных H по параметрам модели, предсказавшей значение y_pred
    Обратите внимание, что размерность этого градиента должна получиться на единицу больше размерности x засчет своободного коэффициента a0
    """
    x_shape = np.shape(x)
    grad = np.zeros(shape=(x_shape[0]+1,))
    p = 1/(1+np.exp(-(np.dot(alpha[:-1], x)+alpha[-1])))
    dHdp = -y_true/p + (1-y_true)/(1-p)
    grad[-1] = dHdp*p*(1-p) #dHdw0
    for i in range(x_shape[0]):
      grad[i] = dHdp*p*(1-p)*x[i]  #dHdwi
    return grad


# Функция обновления весов
def update(alpha: np.array, gradient: np.array, lr: float):
    """
    alpha: текущее приближения вектора параметров модели
    gradient: посчитанный градиент по параметрам модели
    lr: learning rate, множитель перед градиентом в формуле обновления параметров
    """
    alpha_new = alpha - lr*gradient
    return alpha_new


# функция тренировки модели
def train(
    alpha0: np.array, x_train: np.array, y_train: np.array, lr: float, num_epoch: int
):
    """
    alpha0 - начальное приближение параметров модели
    x_train - матрица объект-признак обучающей выборки
    y_train - верные ответы для обучающей выборки
    lr - learning rate, множитель перед градиентом в формуле обновления параметров
    num_epoch - количество эпох обучения, то есть полных 'проходов' через весь датасет
    """
    alpha = alpha0.copy()
    for epo in range(num_epoch):
        for i, x in enumerate(x_train):
            grad = gradient(alpha=alpha, y_true=y_train[i], y_pred=-1.0, x=x)
            alpha = update(alpha=alpha, gradient=grad, lr=lr)

    return alpha

if __name__ == '__main__':
    alpha0 = np.asarray([1,2,3,4,5])
    x_train = np.random.rand(3,4)
    y_train = np.asarray([1,0,1,0])
    alpha_end = train(alpha0=alpha0,x_train=x_train,y_train=y_train,lr=0.1,num_epoch=100)
    print(alpha_end)